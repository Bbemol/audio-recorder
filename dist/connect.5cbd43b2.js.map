{"version":3,"sources":["connect.js"],"names":["CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","authorizeButton","document","getElementById","signoutButton","initClient","gapi","client","init","apiKey","clientId","discoveryDocs","scope","then","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","get","onclick","handleAuthClick","handleSignoutClick","error","appendPre","JSON","stringify","style","display","event","signIn","signOut","message","pre","textContent","createTextNode","appendChild","load"],"mappings":";AACA,IAAIA,EAAJ,2EACIC,EAAJ,0CAGIC,EAAiB,CAAC,8DAIlBC,EAAS,6CAETC,EAAkBC,SAASC,eAAe,oBAC1CC,EAAgBF,SAASC,eAAe,kBAa5C,SAASE,IACPC,KAAKC,OAAOC,KAAK,CACfC,OAAQX,EACRY,SAAUb,EACVc,cAAeZ,EACfa,MAAOZ,IACNa,KAAK,WAENP,KAAKQ,MAAMC,kBAAkBC,WAAWC,OAAOC,GAG/CA,EAAmBZ,KAAKQ,MAAMC,kBAAkBC,WAAWG,OAC3DlB,EAAgBmB,QAAUC,EAC1BjB,EAAcgB,QAAUE,GACvB,SAASC,GACVC,EAAUC,KAAKC,UAAUH,EAAO,KAAM,MAQ1C,SAASL,EAAmBF,GACtBA,GACFf,EAAgB0B,MAAMC,QAAU,OAChCxB,EAAcuB,MAAMC,QAAU,UAE9B3B,EAAgB0B,MAAMC,QAAU,QAChCxB,EAAcuB,MAAMC,QAAU,QAOlC,SAASP,EAAgBQ,GACvBvB,KAAKQ,MAAMC,kBAAkBe,SAM/B,SAASR,EAAmBO,GAC1BvB,KAAKQ,MAAMC,kBAAkBgB,UAS/B,SAASP,EAAUQ,GACbC,IAAAA,EAAM/B,SAASC,eAAe,WAC9B+B,EAAchC,SAASiC,eAAeH,EAAU,MACpDC,EAAIG,YAAYF,GA/DhB5B,KAAK+B,KAAK,eAAgBhC","file":"connect.5cbd43b2.js","sourceRoot":"..","sourcesContent":["// Client ID and API key from the Developer Console\nvar CLIENT_ID = process.env.CLIENT_ID;\nvar API_KEY = process.env.API_KEY;\n\n// Array of API discovery doc URLs for APIs used by the quickstart\nvar DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"];\n\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nvar SCOPES = 'https://www.googleapis.com/auth/drive.file';\n\nvar authorizeButton = document.getElementById('authorize_button');\nvar signoutButton = document.getElementById('signout_button');\n\n/**\n *  On load, called to load the auth2 library and API client library.\n */\n// function handleClientLoad() {\n  gapi.load('client:auth2', initClient);\n// }\n\n/**\n *  Initializes the API client library and sets up sign-in state\n *  listeners.\n */\nfunction initClient() {\n  gapi.client.init({\n    apiKey: API_KEY,\n    clientId: CLIENT_ID,\n    discoveryDocs: DISCOVERY_DOCS,\n    scope: SCOPES\n  }).then(function () {\n    // Listen for sign-in state changes.\n    gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n\n    // Handle the initial sign-in state.\n    updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n    authorizeButton.onclick = handleAuthClick;\n    signoutButton.onclick = handleSignoutClick;\n  }, function(error) {\n    appendPre(JSON.stringify(error, null, 2));\n  });\n}\n\n/**\n *  Called when the signed in status changes, to update the UI\n *  appropriately. After a sign-in, the API is called.\n */\nfunction updateSigninStatus(isSignedIn) {\n  if (isSignedIn) {\n    authorizeButton.style.display = 'none';\n    signoutButton.style.display = 'block';\n  } else {\n    authorizeButton.style.display = 'block';\n    signoutButton.style.display = 'none';\n  }\n}\n\n/**\n *  Sign in the user upon button click.\n */\nfunction handleAuthClick(event) {\n  gapi.auth2.getAuthInstance().signIn();\n}\n\n/**\n *  Sign out the user upon button click.\n */\nfunction handleSignoutClick(event) {\n  gapi.auth2.getAuthInstance().signOut();\n}\n\n/**\n * Append a pre element to the body containing the given message\n * as its text node. Used to display the results of the API call.\n *\n * @param {string} message Text to be placed in pre element.\n */\nfunction appendPre(message) {\n  var pre = document.getElementById('content');\n  var textContent = document.createTextNode(message + '\\n');\n  pre.appendChild(textContent);\n}\n\n"]}