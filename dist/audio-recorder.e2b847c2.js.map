{"version":3,"sources":["index.js"],"names":["player","document","getElementById","stopBtn","recordBtn","downloadLink","handleSuccess","stream","options","recordedChunks","mediaRecorder","MediaRecorder","mimeType","addEventListener","e","data","size","push","disabled","stop","src","URL","createObjectURL","Blob","file","type","headers","gapi","auth","getToken","access_token","form","FormData","append","JSON","stringify","fetch","method","Headers","body","then","res","json","val","console","log","start","navigator","mediaDevices","getUserMedia","audio","video"],"mappings":";AAEA,IAAMA,EAASC,SAASC,eAAe,UACjCC,EAAUF,SAASC,eAAe,QAClCE,EAAYH,SAASC,eAAe,UACpCG,EAAeJ,SAASC,eAAe,YAEvCI,EAAgB,SAAUC,GACxBC,IACFC,EAAiB,GACfC,EAAgB,IAAIC,cAAcJ,EAFxB,CAAEK,SAAU,eAG5BF,EAAcG,iBAAiB,gBAAiB,SAAUC,GACpDA,EAAEC,KAAKC,KAAO,GAChBP,EAAeQ,KAAKH,EAAEC,QAG1BZ,EAAQU,iBAAiB,QAAS,WAChCT,EAAUc,UAAW,EACrBf,EAAQe,UAAW,EAEnBR,EAAcS,SAGhBT,EAAcG,iBAAiB,OAAQ,WAGrCb,EAAOoB,IAAMC,IAAIC,gBAAgB,IAAIC,KAAKd,IAEtCe,IAAAA,EAAO,IAAID,KAAKd,EAAgB,CAACgB,KAAM,eAQvCC,EAAU,CAAmB,cAAA,UADfC,KAAKC,KAAKC,WAAWC,cAoBnCC,EAAO,IAAIC,SACfD,EAAKE,OAAO,WAAY,IAAIV,KAAK,CAACW,KAAKC,UA3BxB,CACH,KAAA,gBACI,SAAA,aACD,QAAA,CAAC,wCAwB6C,CAACV,KAAM,sBACpEM,EAAKE,OAAO,OAAQT,GAEpBY,MAAyF,kFAAA,CACvFC,OAAQ,OACRX,QAAS,IAAIY,QAAQZ,GACrBa,KAAMR,IACLS,KAAK,SAACC,GACAA,OAAAA,EAAIC,SACVF,KAAK,SAACG,GACPC,QAAQC,IAAIF,KAGdlC,EAAiB,KAGnBL,EAAUS,iBAAiB,QAAS,WAClCT,EAAUc,UAAW,EACrBf,EAAQe,UAAW,EACnBR,EAAcoC,WAIlBC,UAAUC,aACPC,aAAa,CAAEC,OAAO,EAAMC,OAAO,IACnCX,KAAKlC","file":"audio-recorder.e2b847c2.js","sourceRoot":"..","sourcesContent":["\n\nconst player = document.getElementById(\"player\");\nconst stopBtn = document.getElementById(\"stop\");\nconst recordBtn = document.getElementById(\"record\");\nconst downloadLink = document.getElementById(\"download\");\n\nconst handleSuccess = function (stream) {\n  const options = { mimeType: \"audio/webm\" };\n  let recordedChunks = [];\n  const mediaRecorder = new MediaRecorder(stream, options);\n  mediaRecorder.addEventListener(\"dataavailable\", function (e) {\n    if (e.data.size > 0) {\n      recordedChunks.push(e.data);\n    }\n  });\n  stopBtn.addEventListener(\"click\", function () {\n    recordBtn.disabled = false;\n    stopBtn.disabled = true;\n\n    mediaRecorder.stop();\n  });\n\n  mediaRecorder.addEventListener(\"stop\", function () {\n/*     downloadLink.href = URL.createObjectURL(new Blob(recordedChunks));\n    downloadLink.download = \"acetest.wav\"; */\n    player.src = URL.createObjectURL(new Blob(recordedChunks));\n\n    var file = new Blob(recordedChunks, {type: 'audio/webm'});\n    var metadata = {\n        'name': 'newRecord.wav', // Filename at Google Drive\n        'mimeType': 'audio/webm', // mimeType at Google Drive\n        'parents': ['1YO14HFMAwNKGm92fmmGMq9mFwg8fKUf3'], // Folder ID at Google Drive\n    };\n\n    var accessToken = gapi.auth.getToken().access_token; // Here gapi is used for retrieving the access token.\n    var headers = { 'Authorization': 'Bearer ' + accessToken };\n\n    // create folder if doesn't exist\n    /* var fileMetadata = {\n      'name': 'Invoices',\n      'mimeType': 'application/vnd.google-apps.folder'\n    };\n    var formFolder = new FormData();\n    formFolder.append('metadata', new Blob([JSON.stringify(fileMetadata)], {type: 'application/json'}))\n    fetch(`https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id`, {\n      method: 'POST',\n      headers: new Headers(headers),\n      body: formFolder\n    }).then((res) => {\n      return res.json()\n    }).then(val => {\n      console.log(val)\n    }) */\n\n    var form = new FormData();\n    form.append('metadata', new Blob([JSON.stringify(metadata)], {type: 'application/json'}));\n    form.append('file', file);\n\n    fetch(`https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id`, {\n      method: 'POST',\n      headers: new Headers(headers),\n      body: form\n    }).then((res) => {\n      return res.json();\n    }).then((val) => {\n      console.log(val);\n    })\n    \n    recordedChunks = [];\n  });\n\n  recordBtn.addEventListener(\"click\", function () {\n    recordBtn.disabled = true;\n    stopBtn.disabled = false;\n    mediaRecorder.start();\n  });\n};\n\nnavigator.mediaDevices\n  .getUserMedia({ audio: true, video: false })\n  .then(handleSuccess);"]}